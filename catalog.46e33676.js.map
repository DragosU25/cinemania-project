{"mappings":"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","sources":["src/scripts/search-catalog.js"],"sourcesContent":["import { searchMovies, getGenres } from '../scripts/movie-api';\n\nconst gallery = document.querySelector('.gallery');\nconst searchForm = document.querySelector('form');\nconst pagination = document.querySelector('#pagination');\nconst message = document.querySelector('#message');\nconst yearFilterContainer = document.querySelector('#year-filter-container'); // Container for the year select\n\nlet currentPage = 1;\nlet currentQuery = 'popular'; // Implicit search query for popular movies\nconst perPage = 20;\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500'; // Base URL for images\nconst LOCAL_PLACEHOLDER_IMAGE = '../images/alternative-image.png'; // Path to local placeholder image\nlet allMovies = []; // Store all movies for filtering\n\nconst renderMovies = async movies => {\n  const genres = await getGenres();\n\n  const movieHTML = movies\n    .map(movie => {\n      const movieGenres = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n      const posterPath = movie.poster_path\n        ? `${IMAGE_BASE_URL}${movie.poster_path}`\n        : LOCAL_PLACEHOLDER_IMAGE;\n\n      return `\n        <div class=\"search-section-movie\" style=\"background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 63.48%, rgba(0, 0, 0, 0.90) 92.16%), url('${posterPath}');\" data-movie-id=\"${\n        movie.id\n      }\">\n          <div class=\"search-section-movie-card-info\">\n            <h3 class=\"search-section-movie-card-title\">${\n              movie.name || movie.title\n            }</h3> \n            <div class=\"search-section-movie-card-details\">\n              <p class=\"search-section-movie-card-genre-year\">${movieGenres} | ${new Date(\n        movie.release_date\n      ).getFullYear()}</p>\n              <p class=\"search-section-movie-card-rate\">${\n                movie.vote_average\n              }</p>\n            </div>\n          </div>\n        </div>\n      `;\n    })\n    .join('');\n\n  gallery.innerHTML = movieHTML;\n\n  gallery.addEventListener('click', async e => {\n    const movieElement = e.target.closest('.search-section-movie');\n    if (movieElement) {\n      const movieId = movieElement.dataset.movieId;\n      const movie = movies.find(m => m.id == movieId);\n      const movieGenres = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n\n      const html = `\n      <div class=\"search-movie-details-container\">\n        <button class=\"close-btn\">X</button>\n        <img src=\"${\n          movie.poster_path\n            ? IMAGE_BASE_URL + movie.poster_path\n            : LOCAL_PLACEHOLDER_IMAGE\n        }\" alt=\"${movie.title}\" width=\"248\" height=\"315\">\n        <div class=\"search-movie-details\">\n          <h3 class=\"search-movie-title\">${movie.title}</h3>\n          <div class=\"search-movie-info-container\">\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Vote / Votes</p>\n              <p><span class=\"search-rating-span\">${\n                movie.vote_average\n              }</span> / <span class=\"search-rating-span\">${\n        movie.vote_count\n      }</span></p>\n            </div>\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Popularity</p><span>${\n                movie.popularity\n              }</span>\n            </div>\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Genre</p><span>${movieGenres}</span>\n            </div>\n          </div>\n          <div class=\"search-about-info\">\n            <p class=\"search-about-info-title\">ABOUT</p>\n            <p class=\"search-overview\">${movie.overview}</p>\n          </div>\n          <button class=\"add-to-library-btn\">${\n            isInLibrary(movie.id) ? 'Remove from library' : 'Add to my library'\n          }</button>\n        </div>\n      </div>\n    `;\n      const movieDetailsContainer = document.getElementById(\n        'search-movie-details-container'\n      );\n      movieDetailsContainer.innerHTML = html;\n      movieDetailsContainer.classList.remove('hidden');\n\n      // Add event listener for closing the movie details\n      const closeBtn = document.querySelector('.close-btn');\n      closeBtn.addEventListener('click', () => {\n        movieDetailsContainer.classList.add('hidden');\n      });\n\n      // Add event listener for the library button\n      const libraryBtn = document.querySelector('.add-to-library-btn');\n      libraryBtn.addEventListener('click', () => {\n        toggleLibrary(movie);\n        libraryBtn.textContent = isInLibrary(movie.id)\n          ? 'Remove from library'\n          : 'Add to my library';\n      });\n    }\n  });\n\n  // Function to check if a movie is in the library\n  const isInLibrary = movieId => {\n    const library = JSON.parse(localStorage.getItem('library')) || [];\n    return library.some(movie => movie.id == movieId);\n  };\n\n  // Function to toggle a movie in the library\n  const toggleLibrary = movie => {\n    let library = JSON.parse(localStorage.getItem('library')) || [];\n\n    if (isInLibrary(movie.id)) {\n      library = library.filter(item => item.id != movie.id);\n      localStorage.setItem('library', JSON.stringify(library));\n    } else {\n      library.push(movie);\n      localStorage.setItem('library', JSON.stringify(library));\n    }\n  };\n};\n\nconst handlePageChange = async page => {\n  currentPage = page;\n\n  try {\n    const data = await searchMovies(currentQuery, currentPage);\n    allMovies = data.results; // Store all movies for filtering\n    renderMovies(allMovies);\n    renderPagination(data.total_pages);\n    renderYearFilter(); // Render the year filter select\n  } catch (err) {\n    console.error(err);\n    showMessage('Something went wrong. Please try again.');\n  }\n};\n\nconst showMessage = msg => {\n  message.innerHTML = `<p>${msg}</p>`;\n  gallery.innerHTML = '';\n  pagination.innerHTML = '';\n};\n\nconst renderPagination = totalPages => {\n  console.log(`Rendering pagination for ${totalPages} pages`); // Debug log\n  pagination.innerHTML = '';\n\n  if (totalPages <= 1) return; // Do not display pagination if there's only one page\n\n  // Add \"Previous\" button if not on the first page\n  if (currentPage > 1) {\n    const prevButton = createPaginationButton('<');\n    prevButton.addEventListener('click', () =>\n      handlePageChange(currentPage - 1)\n    );\n    pagination.appendChild(prevButton);\n  }\n\n  // Determine the number of pagination buttons to display (max 3)\n  const visiblePages = Math.min(3, totalPages);\n\n  // Determine the start and end of pagination button range\n  let startPage = currentPage - Math.floor(visiblePages / 2);\n  startPage = Math.max(1, startPage);\n  let endPage = startPage + visiblePages - 1;\n  endPage = Math.min(totalPages, endPage);\n\n  // Add individual page buttons\n  for (let i = startPage; i <= endPage; i++) {\n    const pageButton = createPaginationButton(i);\n    if (i === currentPage) pageButton.classList.add('active');\n    pagination.appendChild(pageButton);\n  }\n\n  // Add \"Next\" button if not on the last page\n  if (currentPage < totalPages) {\n    const nextButton = createPaginationButton('>');\n    nextButton.addEventListener('click', () =>\n      handlePageChange(currentPage + 1)\n    );\n    pagination.appendChild(nextButton);\n  }\n\n  function createPaginationButton(label) {\n    const pageButton = document.createElement('button');\n    pageButton.innerText = label;\n    pageButton.classList.add('pagination-button');\n    if (label === currentPage) {\n      pageButton.classList.add('active');\n    }\n    if (label !== '<' && label !== '>') {\n      pageButton.addEventListener('click', () =>\n        handlePageChange(parseInt(label))\n      );\n    }\n    return pageButton;\n  }\n};\n\nconst handleNextPage = nextPage => {\n  handlePageChange(nextPage);\n};\n\nconst renderYearFilter = () => {\n  // Create a select element for the year filter\n  const yearSelect = document.createElement('select');\n  yearSelect.id = 'year-filter';\n  yearSelect.innerHTML = '<option value=\"\">Year</option>';\n\n  // Add options for years from 2000 to 2024\n  for (let year = 2015; year <= 2024; year++) {\n    yearSelect.innerHTML += `<option value=\"${year}\">${year}</option>`;\n  }\n\n  yearSelect.addEventListener('change', handleYearFilterChange);\n\n  // Append the select element to the container\n  yearFilterContainer.innerHTML = ''; // Clear previous content\n  yearFilterContainer.appendChild(yearSelect);\n};\n\nconst handleYearFilterChange = event => {\n  const selectedYear = event.target.value;\n  if (!selectedYear) {\n    renderMovies(allMovies); // If no year is selected, show all movies\n  } else {\n    const filteredMovies = allMovies.filter(\n      movie => new Date(movie.release_date).getFullYear() == selectedYear\n    );\n    renderMovies(filteredMovies); // Show filtered movies\n  }\n};\n\n// Event listener for form submission\nsearchForm.addEventListener('submit', async e => {\n  e.preventDefault();\n  const searchInputValue = searchForm.searchQuery.value.trim();\n  if (!searchInputValue) {\n    showMessage('Please enter a search query');\n    return;\n  }\n  currentPage = 1;\n  currentQuery = searchInputValue;\n  await handlePageChange(currentPage);\n});\n\n// Initial rendering\nrenderPagination(0);\n\n// Initial search to display first 20 popular movies\nhandlePageChange(currentPage);\n"],"names":["$2bk9a","parcelRequire","$96413cee220b8c07$var$gallery","document","querySelector","$96413cee220b8c07$var$searchForm","$96413cee220b8c07$var$pagination","$96413cee220b8c07$var$message","$96413cee220b8c07$var$yearFilterContainer","$96413cee220b8c07$var$currentPage","$96413cee220b8c07$var$currentQuery","$96413cee220b8c07$var$allMovies","$96413cee220b8c07$var$renderMovies","async","movies","genres","getGenres","movieHTML","map","movie","movieGenres","genre_ids","id","join","poster_path","name","title","Date","release_date","getFullYear","vote_average","innerHTML","addEventListener","e","movieElement","target","closest","movieId","dataset","find","m","html","vote_count","popularity","overview","isInLibrary","movieDetailsContainer","getElementById","classList","remove","add","libraryBtn","toggleLibrary","textContent","JSON","parse","localStorage","getItem","some","library","filter","item","setItem","stringify","push","$96413cee220b8c07$var$handlePageChange","page","data","searchMovies","results","$96413cee220b8c07$var$renderPagination","total_pages","$96413cee220b8c07$var$renderYearFilter","err","console","error","$96413cee220b8c07$var$showMessage","msg","totalPages","log","prevButton","createPaginationButton","appendChild","visiblePages","Math","min","startPage","floor","max","endPage","i","pageButton","nextButton","label","createElement","innerText","parseInt","yearSelect","year","$96413cee220b8c07$var$handleYearFilterChange","event","selectedYear","value","filteredMovies","preventDefault","searchInputValue","searchQuery","trim"],"version":3,"file":"catalog.46e33676.js.map"}