{"mappings":"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","sources":["src/scripts/weekly-trends.js"],"sourcesContent":["import { getGenres, getWeekTrendingMovies } from '../scripts/movie-api';\n\nconst displayWeekMovieInfo = async () => {\n  try {\n    // Fetch genres and week trending movies\n    const genres = await getGenres();\n    const movies = await getWeekTrendingMovies();\n\n    // Select container elements\n    const weekTrendingMoviesContainer = document.querySelector(\n      '.week-trending-container'\n    );\n    const seeAllBtn = document.getElementById('see-all-btn');\n    const movieDetailsContainer = document.querySelector('.movie-card');\n\n    // Determine if mobile viewport\n    const isMobile = window.innerWidth <= 768;\n\n    // Function to create HTML for movie card\n    const createMovieCard = movie => {\n      const posterPath = movie.poster_path\n        ? movie.poster_path\n        : 'default-poster.jpg';\n      const genreNames = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n      const releaseDate = movie.release_date;\n      const releaseYear = releaseDate.split('-')[0];\n\n      return `\n        <div data-movieid=\"${movie.id}\" class=\"week-movie-card\" style=\"background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 63.48%, rgba(0, 0, 0, 0.90) 92.16%), url('https://image.tmdb.org/t/p/w500${posterPath}') lightgray\">\n          <div>\n            <h2 class=\"movie-title\">${movie.title}</h2> \n            <p class=\"info-title\">Rating: ${movie.vote_average}</p>\n            <p>Genres: ${genreNames} | ${releaseYear}</p>\n          </div>\n        </div>\n      `;\n    };\n\n    // Function to display movies\n    const displayMovies = movies => {\n      weekTrendingMoviesContainer.innerHTML = movies\n        .map(createMovieCard)\n        .join('');\n    };\n\n    // Show initial movies\n    const showInitialMovies = () => {\n      const moviesToShow = isMobile ? 1 : 3;\n      const displayedMovies = movies.slice(0, moviesToShow);\n      displayMovies(displayedMovies);\n    };\n\n    // Show all movies\n    const showAllMovies = () => {\n      displayMovies(movies);\n      seeAllBtn.style.display = 'none';\n    };\n\n    // Event handler for displaying movie details\n    const handleMovieDetails = e => {\n      if (e.target.closest('.week-movie-card')) {\n        const movieCard = e.target.closest('.week-movie-card');\n        const movieId = Number(movieCard.dataset.movieid);\n        const selectedMovie = movies.find(movie => movie.id === movieId);\n\n        if (selectedMovie) {\n          const posterPath = selectedMovie.poster_path\n            ? selectedMovie.poster_path\n            : 'default-poster.jpg';\n          const genreNames = selectedMovie.genre_ids\n            .map(id => genres[id] || 'Unknown')\n            .join(', ');\n\n          let html = `\n            <button class=\"close-btn\">X</button>\n            <div class=\"trends-movie-details-container-content\">\n              <img src=\"https://image.tmdb.org/t/p/original${posterPath}\" alt=\"${selectedMovie.title}\">\n              <div class=\"trends-movie-details\">\n                <h3 class=\"trends-movie-title\">${selectedMovie.title}</h3>\n                <div class=\"trends-movie-info-container\">\n                  <div class=\"trends-movie-info\">\n                    <p class=\"trends-info-title\">Vote / Votes</p>\n                    <p><span class=\"trends-rating-span\">${selectedMovie.vote_average}</span> / <span class=\"trends-rating-span\">${selectedMovie.vote_count}</span></p>\n                  </div>\n                  <div class=\"trends-movie-info\">\n                    <p class=\"trends-info-title\">Popularity</p><span>${selectedMovie.popularity}</span>\n                  </div>\n                  <div class=\"trends-movie-info\">\n                    <p class=\"trends-info-title\">Genre</p><span>${genreNames}</span>\n                  </div>\n                </div>\n                <div class=\"trends-about-info\">\n                  <p class=\"trends-info-title\">ABOUT</p>\n                  <p class=\"trends-overview\">${selectedMovie.overview}</p>\n                </div>\n                <button class=\"add-to-library-btn\">Add to my library</button>\n              </div>\n            </div>\n          `;\n          movieDetailsContainer.innerHTML = html;\n          movieDetailsContainer.classList.remove('is-hidden');\n          const closeBtn = document.querySelector('.close-btn');\n          closeBtn.addEventListener('click', () => {\n            movieDetailsContainer.classList.add('is-hidden');\n          });\n          // Adăugare eveniment pentru butonul de bibliotecă\n          const libraryBtn = document.querySelector('.add-to-library-btn');\n          libraryBtn.addEventListener('click', () => {\n            toggleLibrary(selectedMovie);\n            libraryBtn.textContent = isInLibrary(selectedMovie.id)\n              ? 'Remove from library'\n              : 'Add to my library';\n          });\n\n          const isInLibrary = movieId => {\n            const library = JSON.parse(localStorage.getItem('library')) || [];\n            return library.some(selectedMovie => selectedMovie.id == movieId);\n          };\n\n          const toggleLibrary = movie => {\n            let library = JSON.parse(localStorage.getItem('library')) || [];\n\n            if (isInLibrary(movie.id)) {\n              library = library.filter(item => item.id != selectedMovie.id);\n              localStorage.setItem('library', JSON.stringify(library));\n            } else {\n              library.push(movie);\n              localStorage.setItem('library', JSON.stringify(library));\n            }\n          };\n        }\n      }\n    };\n\n    // Add event listener to \"See All\" button\n    seeAllBtn.addEventListener('click', showAllMovies);\n\n    // Add event listener to container for movie details\n    weekTrendingMoviesContainer.addEventListener('click', handleMovieDetails);\n\n    // Update layout on window resize\n    const handleResize = () => {\n      showInitialMovies();\n      const displayedMovies =\n        weekTrendingMoviesContainer.querySelectorAll('.week-movie-card').length;\n      if (displayedMovies === movies.length) {\n        seeAllBtn.style.display = 'none';\n      } else {\n        seeAllBtn.style.display = 'block';\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Display initial movies\n    showInitialMovies();\n  } catch (error) {\n    console.error('Error displaying movie info: ', error);\n  }\n};\n\ndisplayWeekMovieInfo();\n"],"names":["$bpxeT","parcelRequire","$67b733941576a668$var$displayWeekMovieInfo","$parcel$interopDefault","$2TvXO","mark","_callee","genres","movies1","weekTrendingMoviesContainer","seeAllBtn","movieDetailsContainer","isMobile","createMovieCard","displayMovies","showInitialMovies","showAllMovies","handleMovieDetails","handleResize","$2Vquh","getGenres","_ctx","sent","getWeekTrendingMovies","document","querySelector","getElementById","window","innerWidth","movie","posterPath","poster_path","genreNames","genre_ids","map","id","join","releaseYear","release_date","split","concat","title","vote_average","movies","innerHTML","moviesToShow","displayedMovies","slice","style","display","e","target","closest","movieCard","movieId1","Number","dataset","movieid","selectedMovie1","find","html","vote_count","popularity","overview","classList","remove","addEventListener","add","libraryBtn","toggleLibrary","textContent","isInLibrary","movieId","JSON","parse","localStorage","getItem","some","selectedMovie","library","filter","item","setItem","stringify","push","querySelectorAll","length","console","error","t0"],"version":3,"file":"index.414fe907.js.map"}