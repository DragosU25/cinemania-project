{"mappings":"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","sources":["src/scripts/search-catalog.js"],"sourcesContent":["import { searchMovies, getGenres } from '../scripts/movie-api';\n\nconst gallery = document.querySelector('.gallery');\nconst searchForm = document.querySelector('form');\nconst pagination = document.querySelector('#pagination');\nconst message = document.querySelector('#message');\nconst yearFilterContainer = document.querySelector('#year-filter-container'); // Container for the year select\n\nlet currentPage = 1;\nlet currentQuery = 'popular'; // Implicit search query for popular movies\nconst perPage = 20;\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500'; // Base URL for images\nconst LOCAL_PLACEHOLDER_IMAGE = '../images/alternative-image.png'; // Path to local placeholder image\nlet allMovies = []; // Store all movies for filtering\n\nconst renderMovies = async movies => {\n  const genres = await getGenres();\n\n  const movieHTML = movies\n    .map(movie => {\n      const movieGenres = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n      const posterPath = movie.poster_path\n        ? `${IMAGE_BASE_URL}${movie.poster_path}`\n        : LOCAL_PLACEHOLDER_IMAGE;\n\n      return `\n        <div class=\"search-section-movie\" style=\"background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 63.48%, rgba(0, 0, 0, 0.90) 92.16%), url('${posterPath}');\" data-movie-id=\"${\n        movie.id\n      }\">\n          <div class=\"search-section-movie-card-info\">\n            <h3 class=\"search-section-movie-card-title\">${\n              movie.name || movie.title\n            }</h3> \n            <div class=\"search-section-movie-card-details\">\n              <p class=\"search-section-movie-card-genre-year\">${movieGenres} | ${new Date(\n        movie.release_date\n      ).getFullYear()}</p>\n              <p class=\"search-section-movie-card-rate\">${\n                movie.vote_average\n              }</p>\n            </div>\n          </div>\n        </div>\n      `;\n    })\n    .join('');\n\n  gallery.innerHTML = movieHTML;\n\n  gallery.addEventListener('click', async e => {\n    const movieElement = e.target.closest('.search-section-movie');\n    if (movieElement) {\n      const movieId = movieElement.dataset.movieId;\n      const movie = movies.find(m => m.id == movieId);\n      const movieGenres = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n\n      const html = `\n      <div class=\"search-movie-details-container\">\n        <button class=\"close-btn\">X</button>\n        <img src=\"${\n          movie.poster_path\n            ? IMAGE_BASE_URL + movie.poster_path\n            : LOCAL_PLACEHOLDER_IMAGE\n        }\" alt=\"${movie.title}\" width=\"248\" height=\"315\">\n        <div class=\"search-movie-details\">\n          <h3 class=\"search-movie-title\">${movie.title}</h3>\n          <div class=\"search-movie-info-container\">\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Vote / Votes</p>\n              <p><span class=\"search-rating-span\">${\n                movie.vote_average\n              }</span> / <span class=\"search-rating-span\">${\n        movie.vote_count\n      }</span></p>\n            </div>\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Popularity</p><span>${\n                movie.popularity\n              }</span>\n            </div>\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Genre</p><span>${movieGenres}</span>\n            </div>\n          </div>\n          <div class=\"search-about-info\">\n            <p class=\"search-about-info-title\">ABOUT</p>\n            <p class=\"search-overview\">${movie.overview}</p>\n          </div>\n          <button class=\"add-to-library-btn\">${\n            isInLibrary(movie.id) ? 'Remove from library' : 'Add to my library'\n          }</button>\n        </div>\n      </div>\n    `;\n      const movieDetailsContainer = document.getElementById(\n        'search-movie-details-container'\n      );\n      movieDetailsContainer.innerHTML = html;\n      movieDetailsContainer.classList.remove('hidden');\n\n      // Add event listener for closing the movie details\n      const closeBtn = document.querySelector('.close-btn');\n      closeBtn.addEventListener('click', () => {\n        movieDetailsContainer.classList.add('hidden');\n      });\n\n      // Add event listener for the library button\n      const libraryBtn = document.querySelector('.add-to-library-btn');\n      libraryBtn.addEventListener('click', () => {\n        toggleLibrary(movie);\n        libraryBtn.textContent = isInLibrary(movie.id)\n          ? 'Remove from library'\n          : 'Add to my library';\n      });\n    }\n  });\n\n  // Function to check if a movie is in the library\n  const isInLibrary = movieId => {\n    const library = JSON.parse(localStorage.getItem('library')) || [];\n    return library.some(movie => movie.id == movieId);\n  };\n\n  // Function to toggle a movie in the library\n  const toggleLibrary = movie => {\n    let library = JSON.parse(localStorage.getItem('library')) || [];\n\n    if (isInLibrary(movie.id)) {\n      library = library.filter(item => item.id != movie.id);\n      localStorage.setItem('library', JSON.stringify(library));\n    } else {\n      library.push(movie);\n      localStorage.setItem('library', JSON.stringify(library));\n    }\n  };\n};\n\nconst handlePageChange = async page => {\n  currentPage = page;\n\n  try {\n    const data = await searchMovies(currentQuery, currentPage);\n    allMovies = data.results; // Store all movies for filtering\n    renderMovies(allMovies);\n    renderPagination(data.total_pages);\n    renderYearFilter(); // Render the year filter select\n  } catch (err) {\n    console.error(err);\n    showMessage('Something went wrong. Please try again.');\n  }\n};\n\nconst showMessage = msg => {\n  message.innerHTML = `<p>${msg}</p>`;\n  gallery.innerHTML = '';\n  pagination.innerHTML = '';\n};\n\nconst renderPagination = totalPages => {\n  console.log(`Rendering pagination for ${totalPages} pages`); // Debug log\n  pagination.innerHTML = '';\n\n  if (totalPages <= 1) return; // Do not display pagination if there's only one page\n\n  // Add \"Previous\" button if not on the first page\n  if (currentPage > 1) {\n    const prevButton = createPaginationButton('<');\n    prevButton.addEventListener('click', () =>\n      handlePageChange(currentPage - 1)\n    );\n    pagination.appendChild(prevButton);\n  }\n\n  // Determine the number of pagination buttons to display (max 3)\n  const visiblePages = Math.min(3, totalPages);\n\n  // Determine the start and end of pagination button range\n  let startPage = currentPage - Math.floor(visiblePages / 2);\n  startPage = Math.max(1, startPage);\n  let endPage = startPage + visiblePages - 1;\n  endPage = Math.min(totalPages, endPage);\n\n  // Add individual page buttons\n  for (let i = startPage; i <= endPage; i++) {\n    const pageButton = createPaginationButton(i);\n    if (i === currentPage) pageButton.classList.add('active');\n    pagination.appendChild(pageButton);\n  }\n\n  // Add \"Next\" button if not on the last page\n  if (currentPage < totalPages) {\n    const nextButton = createPaginationButton('>');\n    nextButton.addEventListener('click', () =>\n      handlePageChange(currentPage + 1)\n    );\n    pagination.appendChild(nextButton);\n  }\n\n  function createPaginationButton(label) {\n    const pageButton = document.createElement('button');\n    pageButton.innerText = label;\n    pageButton.classList.add('pagination-button');\n    if (label === currentPage) {\n      pageButton.classList.add('active');\n    }\n    if (label !== '<' && label !== '>') {\n      pageButton.addEventListener('click', () =>\n        handlePageChange(parseInt(label))\n      );\n    }\n    return pageButton;\n  }\n};\n\nconst handleNextPage = nextPage => {\n  handlePageChange(nextPage);\n};\n\nconst renderYearFilter = () => {\n  // Create a select element for the year filter\n  const yearSelect = document.createElement('select');\n  yearSelect.id = 'year-filter';\n  yearSelect.innerHTML = '<option value=\"\">Year</option>';\n\n  // Add options for years from 2000 to 2024\n  for (let year = 2015; year <= 2024; year++) {\n    yearSelect.innerHTML += `<option value=\"${year}\">${year}</option>`;\n  }\n\n  yearSelect.addEventListener('change', handleYearFilterChange);\n\n  // Append the select element to the container\n  yearFilterContainer.innerHTML = ''; // Clear previous content\n  yearFilterContainer.appendChild(yearSelect);\n};\n\nconst handleYearFilterChange = event => {\n  const selectedYear = event.target.value;\n  if (!selectedYear) {\n    renderMovies(allMovies); // If no year is selected, show all movies\n  } else {\n    const filteredMovies = allMovies.filter(\n      movie => new Date(movie.release_date).getFullYear() == selectedYear\n    );\n    renderMovies(filteredMovies); // Show filtered movies\n  }\n};\n\n// Event listener for form submission\nsearchForm.addEventListener('submit', async e => {\n  e.preventDefault();\n  const searchInputValue = searchForm.searchQuery.value.trim();\n  if (!searchInputValue) {\n    showMessage('Please enter a search query');\n    return;\n  }\n  currentPage = 1;\n  currentQuery = searchInputValue;\n  await handlePageChange(currentPage);\n});\n\n// Initial rendering\nrenderPagination(0);\n\n// Initial search to display first 20 popular movies\nhandlePageChange(currentPage);\n"],"names":["$bpxeT","parcelRequire","$f5b78c4ceda1e8db$var$gallery","document","querySelector","$f5b78c4ceda1e8db$var$searchForm","$f5b78c4ceda1e8db$var$pagination","$f5b78c4ceda1e8db$var$message","$f5b78c4ceda1e8db$var$yearFilterContainer","$f5b78c4ceda1e8db$var$currentPage","$f5b78c4ceda1e8db$var$currentQuery","$f5b78c4ceda1e8db$var$IMAGE_BASE_URL","$f5b78c4ceda1e8db$var$LOCAL_PLACEHOLDER_IMAGE","$f5b78c4ceda1e8db$var$allMovies","$f5b78c4ceda1e8db$var$renderMovies","$parcel$interopDefault","$2TvXO","mark","_callee1","movies","genres","movieHTML","isInLibrary","toggleLibrary","$2Vquh","getGenres","_ctx1","sent","map","movie","movieGenres","genre_ids","id","join","posterPath","poster_path","concat","name","title","Date","release_date","getFullYear","vote_average","innerHTML","addEventListener","_callee","e","movieElement","movieId","html","movieDetailsContainer","libraryBtn","target","closest","dataset","find","m","vote_count","popularity","overview","getElementById","classList","remove","add","textContent","JSON","parse","localStorage","getItem","some","library","filter","item","setItem","stringify","push","$f5b78c4ceda1e8db$var$handlePageChange","page","data","searchMovies","_ctx","results","$f5b78c4ceda1e8db$var$renderPagination","total_pages","$f5b78c4ceda1e8db$var$renderYearFilter","console","error","t0","$f5b78c4ceda1e8db$var$showMessage","msg","totalPages","log","prevButton","createPaginationButton","appendChild","visiblePages","Math","min","startPage","floor","endPage","max","i","pageButton","nextButton","label","createElement","innerText","parseInt","yearSelect","year","$f5b78c4ceda1e8db$var$handleYearFilterChange","event","selectedYear","value","filteredMovies","searchInputValue","preventDefault","searchQuery","trim"],"version":3,"file":"catalog.b0096241.js.map"}