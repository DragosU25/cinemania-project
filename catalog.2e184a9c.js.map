{"mappings":"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","sources":["src/scripts/search-catalog.js"],"sourcesContent":["import {\n  searchMovies,\n  getGenres,\n  getTrendingMovies,\n} from '../scripts/movie-api';\n\nconst gallery = document.querySelector('.gallery');\nconst searchForm = document.querySelector('form');\nconst pagination = document.querySelector('#pagination');\nconst message = document.querySelector('#message');\nconst yearFilterContainer = document.querySelector('#year-filter-container');\nconst genreFilterContainer = document.querySelector('#genre-filter-container');\nconst currentDate = new Date().toISOString().split('T')[0];\n\nconst getMoviesForToday = async () => {\n  const movies = await getTrendingMovies();\n  const todayMovies = movies.filter(movie => movie.release_date <= currentDate);\n  return todayMovies;\n};\n\nlet currentPage = 1;\nlet currentQuery = 'popular';\nconst perPage = 20;\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';\nconst LOCAL_PLACEHOLDER_IMAGE = '../images/hero-image.jpg';\nlet allMovies = [];\nlet allGenres = [];\n\nconst renderMovies = async movies => {\n  const genres = await getGenres();\n\n  const movieHTML = movies\n    .map(movie => {\n      const movieGenres = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n      const posterPath = movie.poster_path\n        ? `${IMAGE_BASE_URL}${movie.poster_path}`\n        : LOCAL_PLACEHOLDER_IMAGE;\n\n      return `\n        <div class=\"search-section-movie\" style=\"background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 63.48%, rgba(0, 0, 0, 0.90) 92.16%), url('${posterPath}');\" data-movie-id=\"${\n        movie.id\n      }\">\n          <div class=\"search-section-movie-card-info\">\n            <h3 class=\"search-section-movie-card-title\">${\n              movie.name || movie.title\n            }</h3> \n            <div class=\"search-section-movie-card-details\">\n              <p class=\"search-section-movie-card-genre-year\">${movieGenres} | ${new Date(\n        movie.release_date\n      ).getFullYear()}</p>\n              <p class=\"search-section-movie-card-rate\">${\n                movie.vote_average\n              }</p>\n            </div>\n          </div>\n        </div>\n      `;\n    })\n    .join('');\n\n  gallery.innerHTML = movieHTML;\n\n  gallery.querySelectorAll('.search-section-movie').forEach(movieElement => {\n    movieElement.addEventListener('click', async e => {\n      const movieId = movieElement.dataset.movieId;\n      const movie = movies.find(m => m.id == movieId);\n      const movieGenres = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n\n      const html = `\n      <div class=\"search-movie-details-container\">\n        <button class=\"close-btn\">X</button>\n        <img src=\"${\n          movie.poster_path\n            ? IMAGE_BASE_URL + movie.poster_path\n            : LOCAL_PLACEHOLDER_IMAGE\n        }\" alt=\"${movie.title}\" width=\"248\" height=\"315\">\n        <div class=\"search-movie-details\">\n          <h3 class=\"search-movie-title\">${movie.title}</h3>\n          <div class=\"search-movie-info-container\">\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Vote / Votes</p>\n              <p><span class=\"search-rating-span\">${\n                movie.vote_average\n              }</span> / <span class=\"search-rating-span\">${\n        movie.vote_count\n      }</span></p>\n            </div>\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Popularity</p><span>${\n                movie.popularity\n              }</span>\n            </div>\n            <div class=\"search-movie-info\">\n              <p class=\"search-info-title\">Genre</p><span>${movieGenres}</span>\n            </div>\n          </div>\n          <div class=\"search-about-info\">\n            <p class=\"search-about-info-title\">ABOUT</p>\n            <p class=\"search-overview\">${movie.overview}</p>\n          </div>\n          <button class=\"add-to-library-btn\">${\n            isInLibrary(movie.id) ? 'Remove from library' : 'Add to my library'\n          }</button>\n        </div>\n      </div>\n    `;\n      const movieDetailsContainer = document.getElementById(\n        'search-movie-details-container'\n      );\n      movieDetailsContainer.innerHTML = html;\n      movieDetailsContainer.classList.remove('hidden');\n\n      // Add event listener for closing the movie details\n      document.querySelector('.close-btn').addEventListener('click', () => {\n        movieDetailsContainer.classList.add('hidden');\n      });\n\n      // Add event listener for the library button\n      const libraryBtn = document.querySelector('.add-to-library-btn');\n      libraryBtn.addEventListener('click', () => {\n        toggleLibrary(movie);\n        libraryBtn.textContent = isInLibrary(movie.id)\n          ? 'Remove from library'\n          : 'Add to my library';\n      });\n    });\n  });\n};\n\nconst handlePageChange = async page => {\n  currentPage = page;\n\n  try {\n    const data = await searchMovies(currentQuery, currentPage);\n    allMovies = data.results;\n    renderMovies(allMovies);\n    renderPagination(data.total_pages);\n    renderYearFilter();\n    renderGenreFilter(); // Render the genre filter\n  } catch (err) {\n    console.error(err);\n    showMessage('Something went wrong. Please try again.');\n  }\n};\n\nconst showMessage = msg => {\n  message.innerHTML = `<p>${msg}</p>`;\n  gallery.innerHTML = '';\n  pagination.innerHTML = '';\n};\n\nconst renderPagination = totalPages => {\n  pagination.innerHTML = '';\n\n  if (totalPages <= 1) return;\n\n  if (currentPage > 1) {\n    const prevButton = createPaginationButton('<');\n    prevButton.addEventListener('click', () =>\n      handlePageChange(currentPage - 1)\n    );\n    pagination.appendChild(prevButton);\n  }\n\n  const visiblePages = Math.min(3, totalPages);\n  let startPage = currentPage - Math.floor(visiblePages / 2);\n  startPage = Math.max(1, startPage);\n  let endPage = startPage + visiblePages - 1;\n  endPage = Math.min(totalPages, endPage);\n\n  for (let i = startPage; i <= endPage; i++) {\n    const pageButton = createPaginationButton(i);\n    if (i === currentPage) pageButton.classList.add('active');\n    pagination.appendChild(pageButton);\n  }\n\n  if (currentPage < totalPages) {\n    const nextButton = createPaginationButton('>');\n    nextButton.addEventListener('click', () =>\n      handlePageChange(currentPage + 1)\n    );\n    pagination.appendChild(nextButton);\n  }\n\n  function createPaginationButton(label) {\n    const pageButton = document.createElement('button');\n    pageButton.innerText = label;\n    pageButton.classList.add('pagination-button');\n    pageButton.classList.add('light-mode');\n    if (label === currentPage) {\n      pageButton.classList.add('active');\n    }\n    if (label !== '<' && label !== '>') {\n      pageButton.addEventListener('click', () =>\n        handlePageChange(parseInt(label))\n      );\n    }\n    return pageButton;\n  }\n};\n\nconst renderYearFilter = () => {\n  const yearSelect = document.createElement('select');\n  yearSelect.id = 'year-filter';\n  yearSelect.classList.add('select');\n  yearSelect.innerHTML = '<option value=\"\">Year</option>';\n\n  for (let year = 2015; year <= 2024; year++) {\n    yearSelect.innerHTML += `<option value=\"${year}\">${year}</option>`;\n  }\n\n  yearSelect.addEventListener('change', handleFilterChange);\n  yearFilterContainer.innerHTML = '';\n  yearFilterContainer.appendChild(yearSelect);\n};\n\nconst renderGenreFilter = async () => {\n  const genres = await getGenres();\n  const genreSelect = document.createElement('select');\n  genreSelect.id = 'genre-filter';\n  genreSelect.classList.add('select');\n  genreSelect.innerHTML = '<option value=\"\">Genre</option>';\n\n  Object.keys(genres).forEach(genreId => {\n    genreSelect.innerHTML += `<option value=\"${genreId}\">${genres[genreId]}</option>`;\n  });\n\n  genreSelect.addEventListener('change', handleFilterChange);\n  genreFilterContainer.innerHTML = '';\n  genreFilterContainer.appendChild(genreSelect);\n};\n\nconst handleFilterChange = () => {\n  const selectedYear = document.querySelector('#year-filter').value;\n  const selectedGenre = document.querySelector('#genre-filter').value;\n\n  let filteredMovies = allMovies;\n\n  if (selectedYear) {\n    filteredMovies = filteredMovies.filter(\n      movie => new Date(movie.release_date).getFullYear() == selectedYear\n    );\n  }\n\n  if (selectedGenre) {\n    filteredMovies = filteredMovies.filter(movie =>\n      movie.genre_ids.includes(parseInt(selectedGenre))\n    );\n  }\n\n  renderMovies(filteredMovies);\n};\n\nconst isInLibrary = movieId => {\n  const library = JSON.parse(localStorage.getItem('library')) || [];\n  return library.some(movie => movie.id == movieId);\n};\n\nconst toggleLibrary = movie => {\n  let library = JSON.parse(localStorage.getItem('library')) || [];\n\n  if (isInLibrary(movie.id)) {\n    library = library.filter(item => item.id != movie.id);\n    localStorage.setItem('library', JSON.stringify(library));\n  } else {\n    library.push(movie);\n    localStorage.setItem('library', JSON.stringify(library));\n  }\n};\n\nconst initialize = async () => {\n  try {\n    const movies = await getMoviesForToday();\n    allMovies = movies;\n    renderMovies(allMovies);\n    renderYearFilter();\n    renderGenreFilter();\n  } catch (err) {\n    console.error(err);\n    showMessage('Something went wrong. Please try again.');\n  }\n};\n\nsearchForm.addEventListener('submit', async e => {\n  e.preventDefault();\n  const searchInputValue = searchForm.searchQuery.value.trim();\n  if (!searchInputValue) {\n    showMessage('Please enter a search query');\n    return;\n  }\n  currentPage = 1;\n  currentQuery = searchInputValue;\n  await handlePageChange(currentPage);\n});\n\ninitialize();\n"],"names":["$2bk9a","parcelRequire","$96413cee220b8c07$var$gallery","document","querySelector","$96413cee220b8c07$var$searchForm","$96413cee220b8c07$var$pagination","$96413cee220b8c07$var$message","$96413cee220b8c07$var$yearFilterContainer","$96413cee220b8c07$var$genreFilterContainer","$96413cee220b8c07$var$currentDate","Date","toISOString","split","$96413cee220b8c07$var$currentPage","$96413cee220b8c07$var$currentQuery","$96413cee220b8c07$var$allMovies","$96413cee220b8c07$var$renderMovies","async","movies","genres","getGenres","movieHTML","map","movie","movieGenres","genre_ids","id","join","poster_path","name","title","release_date","getFullYear","vote_average","innerHTML","querySelectorAll","forEach","movieElement","addEventListener","e","movieId","dataset","find","m","html","vote_count","popularity","overview","$96413cee220b8c07$var$isInLibrary","movieDetailsContainer","getElementById","classList","remove","add","libraryBtn","$96413cee220b8c07$var$toggleLibrary","textContent","$96413cee220b8c07$var$handlePageChange","page","data","searchMovies","results","$96413cee220b8c07$var$renderPagination","total_pages","$96413cee220b8c07$var$renderYearFilter","$96413cee220b8c07$var$renderGenreFilter","err","console","error","$96413cee220b8c07$var$showMessage","msg","totalPages","prevButton","createPaginationButton","appendChild","visiblePages","Math","min","startPage","floor","max","endPage","i","pageButton","nextButton","label","createElement","innerText","parseInt","yearSelect","year","$96413cee220b8c07$var$handleFilterChange","genreSelect","Object","keys","genreId","selectedYear","value","selectedGenre","filteredMovies","filter","includes","JSON","parse","localStorage","getItem","some","library","item","setItem","stringify","push","preventDefault","searchInputValue","searchQuery","trim","getTrendingMovies","$96413cee220b8c07$var$getMoviesForToday","$96413cee220b8c07$var$initialize"],"version":3,"file":"catalog.2e184a9c.js.map"}