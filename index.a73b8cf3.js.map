{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAE6BC,WAC3B,IAEE,MAAMC,QAAe,EAAAH,EAAAI,aACfC,QAAe,EAAAL,EAAAM,yBAGfC,EAA8BC,SAASC,cAC3C,4BAEIC,EAAYF,SAASG,eAAe,eACpCC,EAAwBJ,SAASC,cAAc,eAG/CI,EAAWC,OAAOC,YAAc,IAGhCC,EAAkBC,IACtB,MAAMC,EAAaD,EAAME,YACrBF,EAAME,YACN,qBACEC,EAAaH,EAAMI,UACtBC,KAAIC,GAAMpB,EAAOoB,IAAO,YACxBC,KAAK,MAEFC,EADcR,EAAMS,aACMC,MAAM,KAAK,GAE3C,MAAO,gCACgBV,EAAMM,uKAAuKL,yEAEpKD,EAAMW,0DACAX,EAAMY,4CACzBT,OAAgBK,iDAGlC,EAIGK,EAAgBC,IACpBxB,EAA4ByB,UAAYD,EACrCT,IAAIN,GACJQ,KAAK,GAAG,EAIPS,EAAoB,KACxB,MAAMC,EAAerB,EAAW,EAAI,EAC9BsB,EAAkB9B,EAAO+B,MAAM,EAAGF,GACxCJ,EAAcK,EAAgB,EAI1BE,EAAgB,KACpBP,EAAczB,GACdK,EAAU4B,MAAMC,QAAU,MAAM,EAI5BC,EAAqBC,IACzB,GAAIA,EAAEC,OAAOC,QAAQ,oBAAqB,CACxC,MAAMC,EAAYH,EAAEC,OAAOC,QAAQ,oBAC7BE,EAAUC,OAAOF,EAAUG,QAAQC,SACnCC,EAAgB5C,EAAO6C,MAAKjC,GAASA,EAAMM,KAAOsB,IAExD,GAAII,EAAe,CACjB,MAAM/B,EAAa+B,EAAc9B,YAC7B8B,EAAc9B,YACd,qBACEC,EAAa6B,EAAc5B,UAC9BC,KAAIC,GAAMpB,EAAOoB,IAAO,YACxBC,KAAK,MAER,IAAI2B,EAAO,6KAGwCjC,WAAoB+B,EAAcrB,+FAErDqB,EAAcrB,4NAILqB,EAAcpB,mDAAmDoB,EAAcG,8JAGlEH,EAAcI,qJAGnBjC,kMAKnB6B,EAAcK,4KAM5C1C,EAAsBoB,UAAYmB,EAClCvC,EAAsB2C,UAAUC,OAAO,aACtBhD,SAASC,cAAc,cAC/BgD,iBAAiB,SAAS,KACjC7C,EAAsB2C,UAAUG,IAAI,YAAY,IAGlD,MAAMC,EAAanD,SAASC,cAAc,uBAC1CkD,EAAWF,iBAAiB,SAAS,KACnCG,EAAcX,GACdU,EAAWE,YAAcC,EAAYb,EAAc1B,IAC/C,sBACA,mBAAmB,IAGzB,MAAMuC,EAAcC,IACFC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,IAChDC,MAAKC,GAAiBA,EAAc9C,IAAMwC,IAGrDH,EAAgB3C,IACpB,IAAIqD,EAAUN,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,GAEzDL,EAAY7C,EAAMM,KACpB+C,EAAUA,EAAQC,QAAOC,GAAQA,EAAKjD,IAAM0B,EAAc1B,KAC1D2C,aAAaO,QAAQ,UAAWT,KAAKU,UAAUJ,MAE/CA,EAAQK,KAAK1D,GACbiD,aAAaO,QAAQ,UAAWT,KAAKU,UAAUJ,I,KAQzD5D,EAAU+C,iBAAiB,QAASpB,GAGpC9B,EAA4BkD,iBAAiB,QAASjB,GAGtD,MAAMoC,EAAe,KACnB3C,IAEE1B,EAA4BsE,iBAAiB,oBAAoBC,SAC3CzE,EAAOyE,OAC7BpE,EAAU4B,MAAMC,QAAU,OAE1B7B,EAAU4B,MAAMC,QAAU,OAAO,EAIrCzB,OAAO2C,iBAAiB,SAAUmB,GAGlC3C,G,CACA,MAAO8C,GACPC,QAAQD,MAAM,gCAAiCA,E,GAInDE","sources":["src/scripts/weekly-trends.js"],"sourcesContent":["import { getGenres, getWeekTrendingMovies } from '../scripts/movie-api';\n\nconst displayWeekMovieInfo = async () => {\n  try {\n    // Fetch genres and week trending movies\n    const genres = await getGenres();\n    const movies = await getWeekTrendingMovies();\n\n    // Select container elements\n    const weekTrendingMoviesContainer = document.querySelector(\n      '.week-trending-container'\n    );\n    const seeAllBtn = document.getElementById('see-all-btn');\n    const movieDetailsContainer = document.querySelector('.movie-card');\n\n    // Determine if mobile viewport\n    const isMobile = window.innerWidth <= 768;\n\n    // Function to create HTML for movie card\n    const createMovieCard = movie => {\n      const posterPath = movie.poster_path\n        ? movie.poster_path\n        : 'default-poster.jpg';\n      const genreNames = movie.genre_ids\n        .map(id => genres[id] || 'Unknown')\n        .join(', ');\n      const releaseDate = movie.release_date;\n      const releaseYear = releaseDate.split('-')[0];\n\n      return `\n        <div data-movieid=\"${movie.id}\" class=\"week-movie-card\" style=\"background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 63.48%, rgba(0, 0, 0, 0.90) 92.16%), url('https://image.tmdb.org/t/p/w500${posterPath}') lightgray\">\n          <div>\n            <h2 class=\"movie-title\">${movie.title}</h2> \n            <p class=\"info-title\">Rating: ${movie.vote_average}</p>\n            <p>Genres: ${genreNames} | ${releaseYear}</p>\n          </div>\n        </div>\n      `;\n    };\n\n    // Function to display movies\n    const displayMovies = movies => {\n      weekTrendingMoviesContainer.innerHTML = movies\n        .map(createMovieCard)\n        .join('');\n    };\n\n    // Show initial movies\n    const showInitialMovies = () => {\n      const moviesToShow = isMobile ? 1 : 3;\n      const displayedMovies = movies.slice(0, moviesToShow);\n      displayMovies(displayedMovies);\n    };\n\n    // Show all movies\n    const showAllMovies = () => {\n      displayMovies(movies);\n      seeAllBtn.style.display = 'none';\n    };\n\n    // Event handler for displaying movie details\n    const handleMovieDetails = e => {\n      if (e.target.closest('.week-movie-card')) {\n        const movieCard = e.target.closest('.week-movie-card');\n        const movieId = Number(movieCard.dataset.movieid);\n        const selectedMovie = movies.find(movie => movie.id === movieId);\n\n        if (selectedMovie) {\n          const posterPath = selectedMovie.poster_path\n            ? selectedMovie.poster_path\n            : 'default-poster.jpg';\n          const genreNames = selectedMovie.genre_ids\n            .map(id => genres[id] || 'Unknown')\n            .join(', ');\n\n          let html = `\n            <button class=\"close-btn\">X</button>\n            <div class=\"movie-details-container-content\">\n              <img src=\"https://image.tmdb.org/t/p/original${posterPath}\" alt=\"${selectedMovie.title}\">\n              <div class=\"movie-details\">\n                <h3 class=\"movie-title\">${selectedMovie.title}</h3>\n                <div class=\"movie-info-container\">\n                  <div class=\"movie-info\">\n                    <p class=\"info-title\">Vote / Votes</p>\n                    <p><span class=\"rating-span\">${selectedMovie.vote_average}</span> / <span class=\"rating-span\">${selectedMovie.vote_count}</span></p>\n                  </div>\n                  <div class=\"movie-info\">\n                    <p class=\"info-title\">Popularity</p><span>${selectedMovie.popularity}</span>\n                  </div>\n                  <div class=\"movie-info\">\n                    <p class=\"info-title\">Genre</p><span>${genreNames}</span>\n                  </div>\n                </div>\n                <div class=\"about-info\">\n                  <p class=\"info-title\">ABOUT</p>\n                  <p class=\"overview\">${selectedMovie.overview}</p>\n                </div>\n                <button class=\"add-to-library-btn\">Add to my library</button>\n              </div>\n            </div>\n          `;\n          movieDetailsContainer.innerHTML = html;\n          movieDetailsContainer.classList.remove('is-hidden');\n          const closeBtn = document.querySelector('.close-btn');\n          closeBtn.addEventListener('click', () => {\n            movieDetailsContainer.classList.add('is-hidden');\n          });\n          // Adăugare eveniment pentru butonul de bibliotecă\n          const libraryBtn = document.querySelector('.add-to-library-btn');\n          libraryBtn.addEventListener('click', () => {\n            toggleLibrary(selectedMovie);\n            libraryBtn.textContent = isInLibrary(selectedMovie.id)\n              ? 'Remove from library'\n              : 'Add to my library';\n          });\n\n          const isInLibrary = movieId => {\n            const library = JSON.parse(localStorage.getItem('library')) || [];\n            return library.some(selectedMovie => selectedMovie.id == movieId);\n          };\n\n          const toggleLibrary = movie => {\n            let library = JSON.parse(localStorage.getItem('library')) || [];\n\n            if (isInLibrary(movie.id)) {\n              library = library.filter(item => item.id != selectedMovie.id);\n              localStorage.setItem('library', JSON.stringify(library));\n            } else {\n              library.push(movie);\n              localStorage.setItem('library', JSON.stringify(library));\n            }\n          };\n        }\n      }\n    };\n\n    // Add event listener to \"See All\" button\n    seeAllBtn.addEventListener('click', showAllMovies);\n\n    // Add event listener to container for movie details\n    weekTrendingMoviesContainer.addEventListener('click', handleMovieDetails);\n\n    // Update layout on window resize\n    const handleResize = () => {\n      showInitialMovies();\n      const displayedMovies =\n        weekTrendingMoviesContainer.querySelectorAll('.week-movie-card').length;\n      if (displayedMovies === movies.length) {\n        seeAllBtn.style.display = 'none';\n      } else {\n        seeAllBtn.style.display = 'block';\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Display initial movies\n    showInitialMovies();\n  } catch (error) {\n    console.error('Error displaying movie info: ', error);\n  }\n};\n\ndisplayWeekMovieInfo();\n"],"names":["$2bk9a","parcelRequire","async","genres","getGenres","movies1","getWeekTrendingMovies","weekTrendingMoviesContainer","document","querySelector","seeAllBtn","getElementById","movieDetailsContainer","isMobile","window","innerWidth","createMovieCard","movie","posterPath","poster_path","genreNames","genre_ids","map","id","join","releaseYear","release_date","split","title","vote_average","displayMovies","movies","innerHTML","showInitialMovies","moviesToShow","displayedMovies","slice","showAllMovies","style","display","handleMovieDetails","e","target","closest","movieCard","movieId1","Number","dataset","movieid","selectedMovie1","find","html","vote_count","popularity","overview","classList","remove","addEventListener","add","libraryBtn","toggleLibrary","textContent","isInLibrary","movieId","JSON","parse","localStorage","getItem","some","selectedMovie","library","filter","item","setItem","stringify","push","handleResize","querySelectorAll","length","error","console","$992f5163831a4b3f$var$displayWeekMovieInfo"],"version":3,"file":"index.a73b8cf3.js.map"}